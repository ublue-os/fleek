fleek:
  use: "fleek"
  long: |
    Fleek installs and manages packages in your nix installation with a friendly and approachable config file.
    Fleek uses the power of `nix` and `home-manager` behind the scenes to give you access to the largest repository of packages in the world.

    Fleek hides the complexity of `nix` by giving you a CLI and YAML file to manage your installed applications.

    To get started, try `fleek init`.

    To share configurations with other computers, see https://getfleek.dev/docs/multiple
  short: "Fleek makes nix friendly"
  debugFlag: "debug"
  traceFlag: "trace"
  quietFlag: "quiet"
  quietFlagDescription: "suppress logs"
  verboseFlag: "verbose"
  verboseFlagDescription: "show more detailed output"
  nixGarbage: "run garbage collection to remove unused items"
  installNix: "No nix installation found! We recommend starting at https://zero-to-nix.com/"
  noConfigFound: "Configuration file does not exist."
  noFlakeFound: "Fleek configuration directory does not exist."
  migrating: "Migrating .fleek.yml to current version"
  migrated: "Migrated .fleek.yml"
  configLoaded: "Loaded configuration"
  unsupported: |
    Fleek is installed in an deprecated location. 
    The only supported installation method is with `nix profile`:
    `nix profile install github:ublue-os/fleek`
    Remove your installation of fleek and install it with `nix-profile`.
    
eject:
  use: "eject"
  long: |
    Eject writes your current configuration to disk and removes Fleek's templates.
    Changes to .fleek.yml will be ignored; you will modify your Nix configurations directly.
  short: "Manage your home configuration directly, without the .fleek.yml file."
  verboseFlag: "show more detailed output"
  start: "Applying current fleek configuration to your home flake."
  complete: "Home configuration written. All changes should now be made in ~/.local/share/fleek/ directly."
  confirm: "Are you sure you want to manage your home configuration files directly?"
  ejected: "Fleek ejected. Use `home-manager` directly to apply any changes."

generate:
  use: "generate"
  long: |
    Generate does stuff
  short: "Generate a new home-manager configuration using fleek's templates"
  verboseFlag: "show more detailed output"
  start: "Applying current fleek configuration to your home flake."
  complete: "Home configuration written. All changes should now be made in %s directly."
  confirm: "Are you sure you want to manage your home configuration files directly?"
  ejected: "Fleek ejected. Use `home-manager` directly to apply any changes."
  forceFlag: "force"
  forceFlagDescription: "overwrite existing configuration files"
  applyFlag: "apply"
  applyFlagDescription: "apply configuration immediately after generating"
  locationFlag: "location"
  locationFlagDescription: "location of home-manager configuration, relative to home"
  levelFlag: "level"
  levelFlagDescription: "bling level: `none`,`low`,`default`,`high`"
  runFlake: "Run the following commands from the flake directory to apply your changes:"
apply:
  use: "apply"
  long: |
    Apply fleek configuration by reading the ~/.fleek.yml file, updating the flake templates, and applying the changes.

    Use the `--dry-run` flag to test your changes without applying them.
    Use the `--push` flag to push your local changes to your git remote if one is configured.
  short: "Apply fleek configuration"
  example: |
    fleek apply
    fleek apply --dry-run
  behind: "Can't apply with unmerged remote changes. Use `--sync` flag to pull remote changes."
  dryRunFlag: "dry-run"
  dryRunFlagDescription: "dry run - don't apply configuration"
  writingConfig: "Writing configuration templates"
  writingFlake: "Writing Nix flake"
  checkingSystem: "Checking for current system in flake"
  newSystem: "New system detected"
  applyingConfig: "Applying config to flake, please wait..."
  dryApplyingConfig: "Not Applying config to flake, dry run"
  done: "Complete!"
init:
  use: "init"
  long: |
    Initialize fleek with standard configuration options.
    Configuration is stored in $HOME/.local/share/fleek by default. You can change this option with the -l/--location flag.
    For information on sharing configurations with multiple computers, see https://getfleek.dev/docs/multiple
  short: "Initialize fleek"
  example: |
    fleek init
    fleek init git@github.com:your/repo
    fleek init -l .local/share/fleek
    fleek init -a
  forceFlag: "force"
  forceFlagDescription: "overwrite existing configuration files"
  flakeLocation: "Flake Location"
  start: "initializing fleek"
  applyFlag: "apply"
  applyFlagDescription: "apply configuration immediately after cloning"
  checkNix: "checking for nix installation"
  writingConfigs: "Writing configuration files"
  nixNotFound: "can't find `nix` binary - is nix installed?"
  complete: "Done. \n\nEdit ~/.fleek.yml to your taste and run `fleek apply`"
  locationFlag: "location"
  locationFlagDescription: "location of fleek repository, relative to home"
  levelFlag: "level"
  levelFlagDescription: "bling level: `none`,`low`,`default`,`high`"
  newSystem: "New System: %s@%s"
  blingLevel: "Bling Level: %s"
  joining: "Adding current system to configuration"
add:
  use: "add [package] [package] ..."
  long: "Add a new package or program to your configuration.\nUse the `--program` flag to specify a program which can also be configured by nix."
  short: "Add a new package or program to your configuration"
  program: "add a program instead of package"
  example: |
    fleek add --apply neovim
    fleek add emacs
  applyFlag: "apply"
  applyFlagDescription: "apply configuration after adding"
  adding: "Adding package "
  applying: "Applying configuration"
  unapplied: "Package(s) added, but not applied. Run `fleek apply` to apply configuration."
  done: "Complete!"
remove:
  use: "remove [package] [package] ..."
  long: "Remove a package or program from your configuration.\nUse the `--program` flag to specify a program which can also be configured by nix."
  short: "Remove a package or program from your configuration"
  example: |
    fleek remove emacs htop
    fleek remove --apply neovim
  program: "remove a program instead of package"
  applyFlag: "apply"
  applyFlagDescription: "apply configuration after removing"
  config: "Removing package %s from configuration"
  applying: "Removing package and applying configuration"
  needApply: "Package removed. Run `fleek apply` to apply the changes."
  done: "Complete!"
update:
  use: "update"
  long: |
    Update package index.
    Use `--apply` flag to apply the updates.
  short: "Update package index"
  applyStart: "Applying updates"
  applyFlag: "apply"
  applyFlagDescription: "apply updates after updating"
  needApply: "Run the `apply` command to apply these updates"
  applied: "Updates applied."
  done: "Update complete."
show:
  use: "show"
  long: "Show packages, managed packages, and aliases added in your current configuration level."
  short: "Show bling level details"
  example: |
    fleek show
    fleek show --level high
  packages: "Packages"
  managedPackages: "Managed Packages"
  userPackages: "User Packages"
  jsonFlag: "json"
  jsonFlagDescription: "output in json format"
  levelFlag: "level"
  levelFlagDescription: "show a different bling level"
  invalidLevel: "Invalid bling level %s"
search:
  use: "search <package>"
  long: |
    Search the package repository.
    On first run, `search` will download a local copy of the nix packages index in JSON format.

    Update the local package cache by using the `--update` flag.
  short: "Search the package repository"
  example: |
    fleek search neovim
    fleek search --update emacs
  exactMatches: "Exact Matches"
  fuzzyMatches: "Fuzzy Matches"
  openingCache: "Reading package cache"
  cacheError: "Error reading package cache"
  noResults: "No matching packages found"
  noResultsExact: "No matching packages found, try `--fuzzy`"
  updatingCache: "Updating package cache"
  updateFlag: "update"
  updateFlagDescription: "update the package cache"
  fuzzyFlag: "fuzzy"
  fuzzyFlagDescription: "search name and description"
  fuzzyEnabled: "Fuzzy search enabled"
  try: "Try `fleek add %s` to install %s"
  package: "Package"
  version: "Version"
  description: "Description"
version:
  use: "version"
  short: "Print version information"
  flagVerbose: "verbose"
  flagVerboseDescription: "displays additional version information"
  version: "Version:     %v\n"
  platform: "Platform:    %v\n"
  commit:  "Commit:      %v\n"
  time: "Commit Time: %v\n"
  go: "Go Version:  %v\n"
global:
  completed: "Operation completed successfully"
  failed: "Operation failed"
  applying: "Applying configuration"
  initGroup: "Getting Started"
  fleekGroup: "Configuration Commands"
  packageGroup: "Package Management Commands"
  errConflict: "A package in your .fleek.yml exists in your nix profile.\nThis can happen if you manually install something with `nix profile install ...`.\nTo fix this error, run `nix profile list` and find the profile number of the offending package, then run `nix profile remomve [that number]`\nbefore running `fleek` again."
info:
  use: "info <package>"
  long: "Show detailed information about a fleek installed package"
  example: |
    fleek info fzf
  short: "Show detailed information about a fleek installed package"
  notFound: "That program or package is not part of fleek's bling set."
  aliases: "Shell Aliases"
  description: "Description"
flake:
  noConfig: "No configuration files found. Try `fleek init`."
  configLoaded: "Configuration loaded"
  initializingTemplates: "Initializing templates"
  ensureDir: "Ensuring flake directory exists"
  creating: "Creating configuration files"
  writing: "Writing configuration files"
  apply: "Applying configuration"
  update: "Updating flake sources"
git:
  commit: "Git: Committing changes"
  add: "Git: Adding files"
  push: "Git: Pushing changes"
  pull: "Git: Pulling changes"
  warn: |
    Fleek uses `nix` behind the scenes to manage your configuration.

    `nix` will ignore any files in your configuration that are not tracked by
    git, or have been modified but not committed.

    You can choose to manually manage your git repository, or let fleek do some
    of the management for you.

    Either way, if your fleek configuration is in a git repository, fleek will
    automatically `git add`` any changes it makes to prevent surprises.

    Fleek will automatically set `pull.rebase = true` in your repository
    configuration to make sure your local changes are always applied on top of
    the latest remote changes.

    Set `git: autocommit: true` in your .fleek.yml file to have fleek automatically
    commit local changes to git.
    Set `git: autopush: true` in your .fleek.yml file to have fleek
    automatically push local changes to your remote repository.
    Set `git: autopull: true` in your .fleek.yml file to pull remote changes
    before any local changes are made.

    Recommendation:
      Edit your .fleek.yml file and set `git: autoadd: true` to have fleek
      automatically add local changes to git.
      Edit your .fleek.yml file and set `git: autopush: true` to have fleek
      automatically push local changes to your remote repository.
      Edit your .fleek.yml file and set `git: autopull: true` to have fleek
      automatically pull remote changes to your local repository.
